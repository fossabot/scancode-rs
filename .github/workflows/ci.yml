name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  Rust:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
      
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - uses: actions-rs/toolchain@v1
        id: rust-toolchain
        name: Install Rust toolchain
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: actions/cache@v2
        name: Rust cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions-rs/cargo@v1
        name: Cargo build
        id: build
        with:
          command: build
      - uses: LouisBrunner/checks-action@v1.1.1
        name: Report Cargo build status
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Rust / Build
          conclusion: ${{ steps.build.outcome }}
      - uses: actions-rs/cargo@v1
        name: Cargo test
        continue-on-error: true
        id: test
        with:
          command: test
      - uses: LouisBrunner/checks-action@v1.1.1
        name: Report Cargo test status
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Rust / ${{ runner.os }} / Unit Test
          conclusion: ${{ steps.test.outcome }}
      - uses: actions-rs/cargo@v1
        name: Cargo clippy
        continue-on-error: true
        id: clippy
        with:
          command: clippy
          args: -- -D warnings
      - uses: LouisBrunner/checks-action@v1.1.1
        name: Report Cargo clippy status
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Rust / ${{ runner.os }} / Clippy
          conclusion: ${{ steps.clippy.outcome }}
      - uses: actions-rs/cargo@v1
        name: Cargo fmt
        continue-on-error: true
        id: format
        with:
          command: fmt
          args: --all -- --check
      - uses: LouisBrunner/checks-action@v1.1.1
        name: Report Cargo fmt status
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Rust / ${{ runner.os }} / Format
          conclusion: ${{ steps.format.outcome }}